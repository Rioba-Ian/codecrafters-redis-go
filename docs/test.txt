// RedisValue represents a Redis protocol value
type RedisValue struct {
	Type   string
	String string
	Number int
	Array  []RedisValue
}

// RedisParser handles parsing of Redis protocol messages
type RedisParser struct {
	reader *bufio.Reader
}

// NewRedisParser creates a new Redis protocol parser
func NewRedisParser(reader io.Reader) *RedisParser {
	return &RedisParser{
		reader: bufio.NewReader(reader),
	}
}

// Parse parses a Redis protocol message
func (p *RedisParser) Parse() (*RedisValue, error) {
	typeByte, err := p.reader.ReadByte()
	if err != nil {
		return nil, err
	}

	switch typeByte {
	case '+':
		return p.parseSimpleString()
	case '-':
		return p.parseError()
	case ':':
		return p.parseInteger()
	case '$':
		return p.parseBulkString()
	case '*':
		return p.parseArray()
	default:
		return nil, fmt.Errorf("unknown type byte: %c", typeByte)
	}
}

// parseSimpleString parses a simple string (+OK\r\n)
func (p *RedisParser) parseSimpleString() (*RedisValue, error) {
	line, err := p.readLine()
	if err != nil {
		return nil, err
	}
	return &RedisValue{Type: "string", String: line}, nil
}

// parseError parses an error (-Error message\r\n)
func (p *RedisParser) parseError() (*RedisValue, error) {
	line, err := p.readLine()
	if err != nil {
		return nil, err
	}
	return &RedisValue{Type: "error", String: line}, nil
}

// parseInteger parses an integer (:1000\r\n)
func (p *RedisParser) parseInteger() (*RedisValue, error) {
	line, err := p.readLine()
	if err != nil {
		return nil, err
	}
	num, err := strconv.Atoi(line)
	if err != nil {
		return nil, fmt.Errorf("invalid integer: %s", line)
	}
	return &RedisValue{Type: "integer", Number: num}, nil
}

// parseBulkString parses a bulk string ($6\r\nfoobar\r\n)
func (p *RedisParser) parseBulkString() (*RedisValue, error) {
	line, err := p.readLine()
	if err != nil {
		return nil, err
	}

	length, err := strconv.Atoi(line)
	if err != nil {
		return nil, fmt.Errorf("invalid bulk string length: %s", line)
	}

	if length == -1 {
		return &RedisValue{Type: "null"}, nil
	}

	if length == 0 {
		// Read the empty line
		_, err := p.readLine()
		if err != nil {
			return nil, err
		}
		return &RedisValue{Type: "string", String: ""}, nil
	}

	buf := make([]byte, length)
	_, err = io.ReadFull(p.reader, buf)
	if err != nil {
		return nil, err
	}

	// Read the trailing \r\n
	_, err = p.readLine()
	if err != nil {
		return nil, err
	}

	return &RedisValue{Type: "string", String: string(buf)}, nil
}

// parseArray parses an array (*2\r\n$3\r\nfoo\r\n$3\r\nbar\r\n)
func (p *RedisParser) parseArray() (*RedisValue, error) {
	line, err := p.readLine()
	if err != nil {
		return nil, err
	}

	length, err := strconv.Atoi(line)
	if err != nil {
		return nil, fmt.Errorf("invalid array length: %s", line)
	}

	if length == -1 {
		return &RedisValue{Type: "null"}, nil
	}

	array := make([]RedisValue, length)
	for i := 0; i < length; i++ {
		value, err := p.Parse()
		if err != nil {
			return nil, err
		}
		array[i] = *value
	}

	return &RedisValue{Type: "array", Array: array}, nil
}

// readLine reads a line until \r\n
func (p *RedisParser) readLine() (string, error) {
	line, err := p.reader.ReadString('\n')
	if err != nil {
		return "", err
	}

	if len(line) < 2 || line[len(line)-2] != '\r' {
		return "", fmt.Errorf("invalid line ending")
	}

	return line[:len(line)-2], nil
}

// ToCommand converts a RedisValue to a command array
func (v *RedisValue) ToCommand() []string {
	if v.Type != "array" {
		return []string{v.String}
	}

	cmd := make([]string, len(v.Array))
	for i, arg := range v.Array {
		cmd[i] = arg.String
	}
	return cmd
}

// FormatResponse formats a response in Redis protocol format
func FormatResponse(value interface{}) string {
	switch v := value.(type) {
	case string:
		return fmt.Sprintf("+%s\r\n", v)
	case int:
		return fmt.Sprintf(":%d\r\n", v)
	case error:
		return fmt.Sprintf("-%s\r\n", v.Error())
	case nil:
		return "$-1\r\n"
	default:
		return fmt.Sprintf("+%v\r\n", v)
	}
}


func main() {
}

func handleConnection(conn net.Conn) {
	defer conn.Close()

	parser := NewRedisParser(conn)

	for {
		value, err := parser.Parse()
		if errors.Is(err, io.EOF) {
			break
		}
		if err != nil {
			fmt.Printf("Error parsing command: %v\n", err)
			return
		}

		// Convert to command array
		cmd := value.ToCommand()
		if len(cmd) == 0 {
			continue
		}

		// Log the parsed command
		log.Printf("Parsed command: %v", cmd)

		// Handle the command
		response := handleCommand(cmd)

		// Send response
		_, err = conn.Write([]byte(response))
		if err != nil {
			fmt.Printf("Failed to write response: %v\n", err)
			return
		}
	}
}

// handleCommand processes Redis commands and returns appropriate responses
func handleCommand(cmd []string) string {
	if len(cmd) == 0 {
		return FormatResponse(errors.New("ERR empty command"))
	}

	command := strings.ToUpper(cmd[0])

	switch command {
	case "PING":
		if len(cmd) == 1 {
			return FormatResponse("PONG")
		}
		// PING with message
		return FormatResponse(cmd[1])

	case "ECHO":
		if len(cmd) < 2 {
			return FormatResponse(errors.New("ERR wrong number of arguments for 'echo' command"))
		}
		return FormatResponse(cmd[1])

	case "SET":
		if len(cmd) < 3 {
			return FormatResponse(errors.New("ERR wrong number of arguments for 'set' command"))
		}
		// For now, just return OK (we'll implement actual storage later)
		return FormatResponse("OK")

	case "GET":
		if len(cmd) < 2 {
			return FormatResponse(errors.New("ERR wrong number of arguments for 'get' command"))
		}
		// For now, return null (we'll implement actual storage later)
		return FormatResponse(nil)

	default:
		return FormatResponse(fmt.Errorf("ERR unknown command '%s'", command))
	}
}
